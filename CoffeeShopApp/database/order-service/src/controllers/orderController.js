const Order = require('../models/Order');

// L·∫•y ƒë∆°n h√†ng theo userId
exports.getOrdersByUserId = async (req, res) => {
  const { userId } = req.params;

  console.log("Fetching orders for userId:", userId);

  try {
    // Truy v·∫•n t·∫•t c·∫£ c√°c ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng theo userId
    const orders = await Order.find({ "user.user_id": userId }).sort({ createdAt: -1 });

    console.log("Orders found:", orders);

    if (orders.length === 0) {
      return res.status(404).json({ success: false, message: "Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o cho ng∆∞·ªùi d√πng n√†y." });
    }

    res.status(200).json({ success: true, orders });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y ƒë∆°n h√†ng:", error);
    res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
  }
};

// T·∫°o ƒë∆°n h√†ng m·ªõi
exports.createOrder = async (req, res) => {
  try {
    const { user, ChiTietHoaDon, paymentMethod, status } = req.body;

    // T·∫°o m√£ h√≥a ƒë∆°n m·ªõi
    const date = new Date();
    const timestamp = date.getTime();
    const hoadon_id = `HD${timestamp}`;

    // T√≠nh t·ªïng ti·ªÅn
    const tongTien = ChiTietHoaDon.SanPham.reduce((sum, item) => {
      return sum + (item.price * item.quantity);
    }, 0);

    const newOrder = new Order({
      hoadon_id,
      user,
      ChiTietHoaDon: {
        ...ChiTietHoaDon,
        dateCreated: date,
        chitiethoadon_id: `CT${timestamp}`
      },
      tongTien,
      status: status || 'ƒêang x·ª≠ l√Ω',
      paymentMethod: paymentMethod || 'Ti·ªÅn m·∫∑t',
    });

    const savedOrder = await newOrder.save();
    console.log("üìù ƒê∆°n h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o:", savedOrder);

    res.status(201).json({ success: true, order: savedOrder });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
    res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
  }
};

// L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
exports.getOrderById = async (req, res) => {
  try {
    const order = await Order.findOne({ hoadon_id: req.params.orderId });
    
    if (!order) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }
    
    res.json({ success: true, order });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
exports.updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;
    
    if (!status) {
      return res.status(400).json({ success: false, message: "Thi·∫øu th√¥ng tin tr·∫°ng th√°i" });
    }
    
    const updatedOrder = await Order.findOneAndUpdate(
      { hoadon_id: req.params.orderId },
      { $set: { status } },
      { new: true }
    );
    
    if (!updatedOrder) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }
    
    res.json({ success: true, order: updatedOrder });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
exports.getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find({}).sort({ createdAt: -1 });
    res.json({ success: true, orders });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
}; 