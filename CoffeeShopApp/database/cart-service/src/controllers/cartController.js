const Cart = require('../models/Cart');

// L·∫•y gi·ªè h√†ng theo userId
exports.getCartByUserId = async (req, res) => {
  try {
    console.log("üîç G·ªçi API v·ªõi userId:", req.params.userId);

    const cart = await Cart.findOne({ "User.User_id": req.params.userId });

    console.log("üìå K·∫øt qu·∫£ t·ª´ MongoDB:", cart);

    // N·∫øu kh√¥ng t√¨m th·∫•y gi·ªè h√†ng, tr·∫£ v·ªÅ gi·ªè h√†ng r·ªóng thay v√¨ l·ªói 404
    if (!cart) {
      return res.json({ cart: { SanPham: [], totalPrice: 0 } });
    }

    res.json({ cart });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// C·∫≠p nh·∫≠t gi·ªè h√†ng
exports.updateCart = async (req, res) => {
  try {
    console.log("üîç C·∫≠p nh·∫≠t gi·ªè h√†ng v·ªõi userId:", req.params.userId);
    console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);

    const { SanPham } = req.body;

    // T√≠nh t·ªïng ti·ªÅn
    const totalPrice = SanPham.reduce((sum, item) => sum + (item.price * item.quantity || 0), 0);

    // T√¨m v√† c·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi gi·ªè h√†ng v·ªõi upsert: true
    const updatedCart = await Cart.findOneAndUpdate(
      { "User.User_id": req.params.userId },
      {
        SanPham: SanPham || [],
        totalPrice: totalPrice,
        User: { User_id: req.params.userId }, // ƒê·∫£m b·∫£o User object c√≥ User_id
      },
      { upsert: true, new: true, runValidators: true }
    );

    console.log("üìå K·∫øt qu·∫£ sau khi c·∫≠p nh·∫≠t:", updatedCart);
    res.json({ cart: updatedCart });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
exports.addToCart = async (req, res) => {
  try {
    const userId = req.params.userId;
    const productToAdd = req.body;

    console.log("üîç Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng cho userId:", userId);
    console.log("S·∫£n ph·∫©m c·∫ßn th√™m:", productToAdd);

    // Ki·ªÉm tra gi·ªè h√†ng hi·ªán t·∫°i
    let cart = await Cart.findOne({ "User.User_id": userId });

    if (!cart) {
      // T·∫°o gi·ªè h√†ng m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
      cart = new Cart({
        User: { User_id: userId },
        SanPham: [productToAdd],
        totalPrice: productToAdd.price * productToAdd.quantity
      });
    } else {
      // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
      const existingProductIndex = cart.SanPham.findIndex(
        (item) => item.sanpham_id === productToAdd.sanpham_id
      );

      if (existingProductIndex !== -1) {
        // N·∫øu s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        cart.SanPham[existingProductIndex].quantity += productToAdd.quantity;
      } else {
        // N·∫øu l√† s·∫£n ph·∫©m m·ªõi, th√™m v√†o m·∫£ng SanPham
        cart.SanPham.push(productToAdd);
      }

      // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
      cart.totalPrice = cart.SanPham.reduce(
        (total, item) => total + item.price * item.quantity, 0
      );
    }

    // L∆∞u gi·ªè h√†ng
    await cart.save();

    console.log("üìå K·∫øt qu·∫£ sau khi th√™m s·∫£n ph·∫©m:", cart);
    res.json({ success: true, cart });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
  }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
exports.removeFromCart = async (req, res) => {
  try {
    const userId = req.params.userId;
    const productId = req.params.productId;

    console.log("üîç X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng cho userId:", userId);
    console.log("M√£ s·∫£n ph·∫©m c·∫ßn x√≥a:", productId);

    // T√¨m gi·ªè h√†ng
    const cart = await Cart.findOne({ "User.User_id": userId });

    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    // L·ªçc b·ªè s·∫£n ph·∫©m c·∫ßn x√≥a
    cart.SanPham = cart.SanPham.filter(item => item.sanpham_id !== productId);

    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
    cart.totalPrice = cart.SanPham.reduce(
      (total, item) => total + item.price * item.quantity, 0
    );

    // L∆∞u gi·ªè h√†ng
    await cart.save();

    console.log("üìå K·∫øt qu·∫£ sau khi x√≥a s·∫£n ph·∫©m:", cart);
    res.json({ success: true, cart });
  } catch (error) {
    console.error("‚ùå L·ªói API:", error);
    res.status(500).json({ success: false, message: "L·ªói server", error: error.message });
  }
}; 